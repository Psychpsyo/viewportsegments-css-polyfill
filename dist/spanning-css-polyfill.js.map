{"version":3,"file":"spanning-css-polyfill.js","sources":["../src/constants.js","../src/utils/misc.js","../src/utils/css-text-processors.js","../src/index.js","../src/utils/device-gemoetry.js"],"sourcesContent":["export const SPANNING_MF_KEY = \"spanning\";\nexport const SPANNING_MF_VAL_HOR = \"single-fold-horizontal\";\nexport const SPANNING_MF_VAL_VER = \"single-fold-vertical\";\nexport const SPANNING_MF_VAL_NONE = \"none\";\n\nexport const CSS_ENV_FOLD_TOP = \"fold-top\";\nexport const CSS_ENV_FOLD_LEFT = \"fold-left\";\nexport const CSS_ENV_FOLD_HEIGHT = \"fold-height\";\nexport const CSS_ENV_FOLD_WIDTH = \"fold-width\";\n\nexport const POLYFILL_NAMESPACE = \"__foldables_env_vars__\";\n","/**\n * Returns a promise, once resolved it contains an array\n * of CSS text retrieved from <link> URLs and <style> DOM elements\n *\n * @param {array} elements JavaScript array (not NodeList)\n *\n * @return {Promise<string[]>}\n */\nexport function fetchCSSText(elements) {\n  return Promise.all(\n    elements.map(element => {\n      let href = element.href;\n      if (href) {\n        return fetch(href).then(r => r.text());\n      }\n      return element.textContent;\n    })\n  );\n}\n\n/**\n * Returns a function that won't call `fn` if it was invoked at a faster interval than `wait`\n *\n * @param {Function} fn\n * @param {Number} wait - milliseconds\n */\nexport function debounnce(fn, wait) {\n  let timeout;\n  return function() {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn.apply(this, arguments), wait);\n  };\n}\n","import {\n  SPANNING_MF_KEY,\n  SPANNING_MF_VAL_HOR,\n  SPANNING_MF_VAL_VER,\n  SPANNING_MF_VAL_NONE\n} from \"../constants.js\";\n\nconst SPANNING_MEDIA_BLOCK_REGEXP_STR = `(@media.*?\\\\b${SPANNING_MF_KEY}\\\\b[^{]+)\\\\{([\\\\s\\\\S]+?\\\\})\\\\s*\\\\}`;\n\nconst MEDIA_FEATURES_REGEXP = /\\((.*?)\\)/gi;\n\nconst MEDIA_TYPES_REGEXP = /@media[^\\(]+/gi;\n\nconst cssEnvVariableRegExpMaker = variable => {\n  return new RegExp(`env\\\\(\\\\s*${variable}\\\\s*\\\\)`, \"gi\");\n};\n\n/**\n * Finds and returns an array of `@media` blocks with containing spanning media feature\n *\n * @param {string} cssText\n *\n * @returns {string[]}\n */\nexport function _processSpanningMediaBlock(cssText) {\n  let regex = new RegExp(SPANNING_MEDIA_BLOCK_REGEXP_STR, \"gi\");\n\n  // mathAll is not yet supported in Safari but shipped in Edge, Chrome and FF\n  // Accoding to Babel docs: https://babeljs.io/docs/en/babel-preset-env#shippedproposals\n  // setting {useBuiltIns: \"usage\"} will use the browser shipped version than the transpiled\n  let spanningMediaBlocks = Array.from(cssText.matchAll(regex));\n\n  return spanningMediaBlocks;\n}\n\n/**\n * Replaces spanning `@media` blocks containning `spanning` feature and returns a new string\n *\n * @param {String} originalSheetStr\n * @param {String} replaceWith\n *\n * @returns {String}\n */\nexport function replaceSpanningMediaBlocks(originalSheetStr, replaceWith) {\n  return originalSheetStr.replace(\n    new RegExp(SPANNING_MEDIA_BLOCK_REGEXP_STR, \"gi\"),\n    replaceWith\n  );\n}\n\n/**\n * Replaces a word in a string and returns a new string\n *\n * @param {String} originalSheetStr\n * @param {String} cssEnvVariable\n * @param {String} replaceWith\n *\n * @returns {String}\n */\nexport function replaceCSSEnvVariables(\n  originalSheetStr,\n  cssEnvVariable,\n  replaceWith\n) {\n  return originalSheetStr.replace(\n    cssEnvVariableRegExpMaker(cssEnvVariable),\n    replaceWith\n  );\n}\n\n/**\n * Returns an array of media features found a string sucb as `(min-width: ..)`, `(orientation:..)` etc..\n *\n * @param {String[]} mediaQueryStr\n *\n * @returns {String[]}\n */\nexport function _getMediaFeatures(mediaQueryStr) {\n  return mediaQueryStr.match(MEDIA_FEATURES_REGEXP) || [];\n}\n\n/**\n * Returns an array containing `@media` and following media types such as screen, all, print, etc.\n * up until the first media feature parentheses\n *\n * @param {*} mediaQueryStr\n *\n * @returns {String[]}\n */\nexport function _getMediaTypes(mediaQueryStr) {\n  return mediaQueryStr.match(MEDIA_TYPES_REGEXP) || [];\n}\n\n/**\n * Finds all spanning media queries in CSS text and returns an object of all media\n * queries grouped by type\n *\n * @param {*} cssText\n */\nexport function getSpanningCSSText(cssText) {\n  let spanningMediaBlocks = _processSpanningMediaBlock(cssText);\n\n  let result = {\n    [SPANNING_MF_VAL_HOR]: \"\",\n    [SPANNING_MF_VAL_VER]: \"\",\n    [SPANNING_MF_VAL_NONE]: \"\"\n  };\n\n  spanningMediaBlocks.forEach(block => {\n    let defintion = block[1];\n    let content = block[2];\n\n    //TODO: this is bad.\n    let spanningValue = SPANNING_MF_VAL_NONE;\n    if (defintion.indexOf(SPANNING_MF_VAL_HOR) > -1) {\n      spanningValue = SPANNING_MF_VAL_HOR;\n    }\n    if (defintion.indexOf(SPANNING_MF_VAL_VER) > -1) {\n      spanningValue = SPANNING_MF_VAL_VER;\n    }\n\n    let mediaTypes = _getMediaTypes(defintion);\n    let mediaFeatures = _getMediaFeatures(defintion);\n\n    mediaFeatures = mediaFeatures\n      .filter(f => !f.includes(SPANNING_MF_KEY))\n      .join(\" and \");\n\n    result[spanningValue] += `\n      ${mediaTypes} ${mediaFeatures} {\n        ${content}\n      }`;\n  });\n\n  return result;\n}\n","import { SPANNING_MF_VAL_NONE, POLYFILL_NAMESPACE } from \"./constants.js\";\n\nimport {\n  getSpanningCSSText,\n  replaceSpanningMediaBlocks,\n  replaceCSSEnvVariables\n} from \"./utils/css-text-processors.js\";\n\nimport { getDeviceFoldRects } from \"./utils/device-gemoetry.js\";\n\nimport { fetchCSSText, debounnce } from \"./utils/misc.js\";\n\n\n// polyfill configuration related variables\nlet spanning =\n  sessionStorage.getItem(`${POLYFILL_NAMESPACE}-spanning`) ||\n  SPANNING_MF_VAL_NONE;\nlet foldSize = sessionStorage.getItem(`${POLYFILL_NAMESPACE}-foldSize`) || 0;\nlet browserShellSize =\n  sessionStorage.getItem(`${POLYFILL_NAMESPACE}-browserShellSize`) || 0;\nlet configs = {\n  spanning,\n  foldSize,\n  browserShellSize,\n  update\n};\n\nlet cssElements = Array.from(\n  document.querySelectorAll('link[rel=\"stylesheet\"], style')\n);\n\n// original page CSS\nlet cssText = \"\";\n\n/**\n * modified page CSS text: env(fold-*) variables replaced, (spanning: *) media query replaced\n * grouped in this object as:\n * -- all: all non-spanning page styles\n * -- single-fold-vertical: CSS found in the media feature (spanning: single-fold-vertical)\n * -- single-fold-horizontal: CSS found in the media feature (spanning: single-fold-horizontal)\n * -- none: CSS found in the media feature (spanning: none)\n */\nlet editedCSSText = {};\n\nfetchCSSText(cssElements).then(sheetsTextContentArray => {\n  cssText = sheetsTextContentArray.join(\"\\n\");\n\n  // all other css excluding spanning media blocks\n  editedCSSText.all = replaceSpanningMediaBlocks(cssText, \"\");\n\n  // spanning media blocks grouped by spanning type (single-fold-horizontal, vertical or none)\n  let spanningCSSText = getSpanningCSSText(cssText);\n  editedCSSText = Object.assign(editedCSSText, spanningCSSText);\n\n  cssElements.forEach(el => el.parentElement.removeChild(el));\n\n  let polyfilledStyles = document.createElement(\"style\");\n  polyfilledStyles.textContent = editedCSSText.all;\n  document.head.appendChild(polyfilledStyles);\n\n  // insert spanning media query styelsheet\n  insertSpanningStyles();\n\n  // global configs, accessible via the window object\n  Object.defineProperty(window, POLYFILL_NAMESPACE, {\n    value: configs\n  });\n\n  window.addEventListener(\"resize\", debounnce(insertSpanningStyles, 150));\n  \n  // web-based emulator runs this polyfill in an iframe, we need to communicate\n  // emulator state changes to the site\n  window.addEventListener(\"message\", evt => {\n    let action = evt.data.action || \"\";\n    let value = evt.data.value || {};\n    if (action === \"update\") {\n      update(value);\n    }\n  });\n\n});\n\n// looks at configs and appends the correct `spanning` styles\nfunction insertSpanningStyles() {\n  Array.from(document.querySelectorAll(`.${POLYFILL_NAMESPACE}`)).forEach(el =>\n    el.parentElement.removeChild(el)\n  );\n\n  if (configs.spanning === SPANNING_MF_VAL_NONE) return;\n\n  let spanningCSSText = editedCSSText[configs.spanning];\n  let rects = getDeviceFoldRects(configs);\n  Object.keys(rects).forEach(r => {\n    spanningCSSText = replaceCSSEnvVariables(\n      spanningCSSText,\n      r,\n      `${rects[r]}px`\n    );\n  });\n\n  let polyfilledStyles = document.createElement(\"style\");\n  polyfilledStyles.className = POLYFILL_NAMESPACE;\n  polyfilledStyles.textContent = spanningCSSText;\n  document.head.appendChild(polyfilledStyles);\n}\n\nconst VALID_CONFIG_PROPS = new Set([\n  \"foldSize\",\n  \"browserShellSize\",\n  \"spanning\"\n]);\n\nfunction update(newConfings) {\n  Object.keys(newConfings).forEach(k => {\n    if (VALID_CONFIG_PROPS.has(k)) {\n      configs[k] = newConfings[k];\n      sessionStorage.setItem(`${POLYFILL_NAMESPACE}-${k}`, configs[k]);\n    }\n    insertSpanningStyles();\n  });\n}\n","import {\n  SPANNING_MF_VAL_VER,\n  SPANNING_MF_VAL_HOR,\n  CSS_ENV_FOLD_TOP,\n  CSS_ENV_FOLD_LEFT,\n  CSS_ENV_FOLD_HEIGHT,\n  CSS_ENV_FOLD_WIDTH\n} from \"../constants.js\";\n\n/**\n * Returns the device fold (hinge) geometry\n *\n * @param {Object} configs\n * @returns {Object}\n */\nexport function getDeviceFoldRects(configs) {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n  if (configs.spanning === SPANNING_MF_VAL_VER) {\n    width = configs.foldSize;\n    height = window.innerHeight;\n    left = window.innerWidth / 2 - configs.foldSize / 2;\n  }\n  if (configs.spanning === SPANNING_MF_VAL_HOR) {\n    width = window.innerWidth;\n    height = configs.foldSize;\n    top =\n      window.innerHeight / 2 - configs.foldSize / 2 - configs.browserShellSize;\n  }\n  return {\n    [CSS_ENV_FOLD_TOP]: top,\n    [CSS_ENV_FOLD_LEFT]: left,\n    [CSS_ENV_FOLD_HEIGHT]: height,\n    [CSS_ENV_FOLD_WIDTH]: width\n  };\n}\n"],"names":["const","elements","SPANNING_MF_VAL_HOR","SPANNING_MF_VAL_VER","SPANNING_MF_VAL_NONE","CSS_ENV_FOLD_TOP","CSS_ENV_FOLD_LEFT","CSS_ENV_FOLD_HEIGHT","CSS_ENV_FOLD_WIDTH","POLYFILL_NAMESPACE","MEDIA_FEATURES_REGEXP","MEDIA_TYPES_REGEXP","cssEnvVariableRegExpMaker","variable","RegExp","configs","sessionStorage","getItem","update","cssElements","Array","from","document","querySelectorAll","cssText","editedCSSText","insertSpanningStyles","forEach","el","parentElement","removeChild","spanning","spanningCSSText","rects","left","top","width","height","foldSize","window","innerHeight","innerWidth","browserShellSize","getDeviceFoldRects","Object","keys","r","replaceWith","replace","polyfilledStyles","createElement","className","textContent","head","appendChild","Promise","all","map","element","href","fetch","then","text","sheetsTextContentArray","join","spanningMediaBlocks","regex","matchAll","_processSpanningMediaBlock","result","block","defintion","content","spanningValue","indexOf","mediaTypes","match","mediaFeatures","filter","f","includes","getSpanningCSSText","assign","fn","timeout","defineProperty","value","addEventListener","clearTimeout","setTimeout","apply","this","arguments","evt","data","action","VALID_CONFIG_PROPS","Set","newConfings","k","has","setItem"],"mappings":"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"}
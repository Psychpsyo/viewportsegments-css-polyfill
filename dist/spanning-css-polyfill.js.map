{"version":3,"file":"spanning-css-polyfill.js","sources":["../src/constants.js","../src/utils/css-text-processors.js","../src/index.js","../src/utils/misc.js","../src/utils/device-geometry.js"],"sourcesContent":["export const SPANNING_MF_KEY = \"spanning\";\r\nexport const SPANNING_MF_VAL_HOR = \"single-fold-horizontal\";\r\nexport const SPANNING_MF_VAL_VER = \"single-fold-vertical\";\r\nexport const SPANNING_MF_VAL_NONE = \"none\";\r\n\r\nexport const CSS_ENV_FOLD_TOP = \"fold-top\";\r\nexport const CSS_ENV_FOLD_LEFT = \"fold-left\";\r\nexport const CSS_ENV_FOLD_HEIGHT = \"fold-height\";\r\nexport const CSS_ENV_FOLD_WIDTH = \"fold-width\";\r\n\r\nexport const POLYFILL_NAMESPACE = \"__foldables_env_vars__\";\r\n","import {\r\n  SPANNING_MF_KEY,\r\n  SPANNING_MF_VAL_HOR,\r\n  SPANNING_MF_VAL_VER,\r\n  SPANNING_MF_VAL_NONE\r\n} from \"../constants.js\";\r\n\r\nconst SPANNING_MEDIA_BLOCK_REGEXP_STR = `(@media.*?\\\\b${SPANNING_MF_KEY}\\\\b[^{]+)\\\\{([\\\\s\\\\S]+?\\\\})\\\\s*\\\\}`;\r\n\r\nconst MEDIA_FEATURES_REGEXP = /\\((.*?)\\)/gi;\r\n\r\nconst MEDIA_TYPES_REGEXP = /@media[^\\(]+/gi;\r\n\r\nconst cssEnvVariableRegExpMaker = variable => {\r\n  return new RegExp(`env\\\\(\\\\s*${variable}\\\\s*\\\\)`, \"gi\");\r\n};\r\n\r\n/**\r\n * Finds and returns an array of `@media` blocks with containing spanning media feature\r\n *\r\n * @param {string} cssText\r\n *\r\n * @returns {string[]}\r\n */\r\nexport function _processSpanningMediaBlock(cssText) {\r\n  const regex = new RegExp(SPANNING_MEDIA_BLOCK_REGEXP_STR, \"gi\");\r\n\r\n  // matchAll is not yet supported in Safari, but shipped in Edge, Chrome and FF\r\n  // Accoding to Babel docs: https://babeljs.io/docs/en/babel-preset-env#shippedproposals\r\n  // setting {useBuiltIns: \"usage\"} will use the browser shipped version rather than\r\n  // the transpiled version.\r\n  let spanningMediaBlocks;\r\n  if(typeof cssText.matchAll === \"function\") {\r\n    spanningMediaBlocks = Array.from(cssText.matchAll(regex));\r\n  }else{\r\n    spanningMediaBlocks = [];\r\n\r\n    while(spanningMediaBlocks[spanningMediaBlocks.length]=regex.exec(cssText));\r\n    spanningMediaBlocks.length--;\r\n  }\r\n  return spanningMediaBlocks;\r\n}\r\n\r\n/**\r\n * Replaces spanning `@media` blocks containing `spanning` feature\r\n * and returns a new stylesheet string\r\n *\r\n * @param {String} originalSheetStr\r\n * @param {String} replaceWith\r\n *\r\n * @returns {String}\r\n */\r\nexport function replaceSpanningMediaBlocks(originalSheetStr, replaceWith) {\r\n  return originalSheetStr.replace(\r\n    new RegExp(SPANNING_MEDIA_BLOCK_REGEXP_STR, \"gi\"),\r\n    replaceWith\r\n  );\r\n}\r\n\r\n/**\r\n * Replaces a word in a string and returns a new string\r\n *\r\n * @param {String} originalSheetStr\r\n * @param {String} cssEnvVariable\r\n * @param {String} replaceWith\r\n *\r\n * @returns {String}\r\n */\r\nexport function replaceCSSEnvVariables(\r\n  originalSheetStr,\r\n  cssEnvVariable,\r\n  replaceWith\r\n) {\r\n  return originalSheetStr.replace(\r\n    cssEnvVariableRegExpMaker(cssEnvVariable),\r\n    replaceWith\r\n  );\r\n}\r\n\r\n/**\r\n * Returns an array of media features found a string sucb as\r\n * `(min-width: ..)`, `(orientation:..)` etc.\r\n *\r\n * @param {String[]} mediaQueryStr\r\n *\r\n * @returns {String[]}\r\n */\r\nexport function _getMediaFeatures(mediaQueryStr) {\r\n  return mediaQueryStr.match(MEDIA_FEATURES_REGEXP) || [];\r\n}\r\n\r\n/**\r\n * Returns an array containing `@media` and following media types such\r\n * as screen, all, print, etc. up until the first media feature parenthesis\r\n *\r\n * @param {*} mediaQueryStr\r\n *\r\n * @returns {String[]}\r\n */\r\nexport function _getMediaTypes(mediaQueryStr) {\r\n  return mediaQueryStr.match(MEDIA_TYPES_REGEXP) || [];\r\n}\r\n\r\n/**\r\n * Finds all spanning media queries in CSS text and returns an object of all media\r\n * queries, grouped by type\r\n *\r\n * @param {*} cssText\r\n */\r\nexport function getSpanningCSSText(cssText) {\r\n  const spanningMediaBlocks = _processSpanningMediaBlock(cssText);\r\n\r\n  const result = {\r\n    [SPANNING_MF_VAL_HOR]: \"\",\r\n    [SPANNING_MF_VAL_VER]: \"\",\r\n    [SPANNING_MF_VAL_NONE]: \"\"\r\n  };\r\n\r\n  spanningMediaBlocks.forEach(block => {\r\n    const definition = block[1];\r\n    const content = block[2];\r\n\r\n    //TODO: this is bad.\r\n    let spanningValue = SPANNING_MF_VAL_NONE;\r\n    if (definition.indexOf(SPANNING_MF_VAL_HOR) > -1) {\r\n      spanningValue = SPANNING_MF_VAL_HOR;\r\n    }\r\n    if (definition.indexOf(SPANNING_MF_VAL_VER) > -1) {\r\n      spanningValue = SPANNING_MF_VAL_VER;\r\n    }\r\n\r\n    const mediaTypes = _getMediaTypes(definition);\r\n    let mediaFeatures = _getMediaFeatures(definition);\r\n\r\n    mediaFeatures = mediaFeatures\r\n      .filter(f => !f.includes(SPANNING_MF_KEY))\r\n      .join(\" and \");\r\n\r\n    result[spanningValue] += `\r\n      ${mediaTypes} ${mediaFeatures} {\r\n        ${content}\r\n      }`;\r\n  });\r\n\r\n  return result;\r\n}\r\n","import {\r\n  POLYFILL_NAMESPACE,\r\n  SPANNING_MF_VAL_NONE,\r\n  SPANNING_MF_VAL_VER,\r\n  SPANNING_MF_VAL_HOR\r\n} from \"./constants.js\";\r\n\r\nimport {\r\n  getSpanningCSSText,\r\n  replaceSpanningMediaBlocks,\r\n  replaceCSSEnvVariables\r\n} from \"./utils/css-text-processors.js\";\r\n\r\nimport { getDeviceFoldRects } from \"./utils/device-geometry.js\";\r\n\r\nimport { fetchCSSText, debounce, createElement } from \"./utils/misc.js\";\r\n\r\nif (typeof window[POLYFILL_NAMESPACE] === typeof(undefined)) {\r\n  // polyfill configuration related variables\r\n  const spanning =\r\n    sessionStorage.getItem(`${POLYFILL_NAMESPACE}-spanning`) ||\r\n    SPANNING_MF_VAL_NONE;\r\n  const foldSize =\r\n    +sessionStorage.getItem(`${POLYFILL_NAMESPACE}-foldSize`) || 0;\r\n  const browserShellSize =\r\n    +sessionStorage.getItem(`${POLYFILL_NAMESPACE}-browserShellSize`) || 0;\r\n  // global configs, accessible via the window object\r\n  Object.defineProperty(window, POLYFILL_NAMESPACE, {\r\n    value: {\r\n      spanning,\r\n      foldSize,\r\n      browserShellSize,\r\n      update: update,\r\n      onupdate: [insertSpanningStyles]\r\n    }\r\n  });\r\n\r\n  // Web-based emulator runs this polyfill in an iframe, we need to\r\n  // communicate emulator state changes to the site.\r\n  // Should only be registered once (in CSS or JS polyfill not both)\r\n  window.addEventListener(\"message\", evt => {\r\n    const action = evt.data.action || \"\";\r\n    const value = evt.data.value || {};\r\n    if (action === \"update\") {\r\n      window[POLYFILL_NAMESPACE].update(value);\r\n    }\r\n  });\r\n} else {\r\n  window[POLYFILL_NAMESPACE].onupdate.push(insertSpanningStyles);\r\n}\r\n\r\nconst cssElements = Array.from(\r\n  document.querySelectorAll('link[rel=\"stylesheet\"], style')\r\n);\r\n\r\n// original page CSS\r\n//let cssText = \"\";\r\n\r\n/**\r\n * modified page CSS text: env(fold-*) variables replaced (spanning: *) media query replaced\r\n * grouped in this object as:\r\n *\r\n * -- single-fold-vertical: CSS found in the media feature (spanning: single-fold-vertical)\r\n * -- single-fold-horizontal: CSS found in the media feature (spanning: single-fold-horizontal)\r\n * -- none: CSS found in the media feature (spanning: none)\r\n */\r\nconst spanning = {\r\n  [SPANNING_MF_VAL_HOR]: \"\",\r\n  [SPANNING_MF_VAL_VER]: \"\",\r\n  [SPANNING_MF_VAL_NONE]: \"\"\r\n};\r\n\r\nfetchCSSText(cssElements).then(sheetsTextContentArray => {\r\n  const styleFragment = new DocumentFragment();\r\n  sheetsTextContentArray.forEach((sheet, i) => {\r\n    // all other css excluding spanning media blocks\r\n    const noSpanningCSS = replaceSpanningMediaBlocks(sheet, \"\");\r\n    const spanningCSS = getSpanningCSSText(sheet);\r\n\r\n    const sheetOrigin = cssElements[i].href || \"inline\";\r\n\r\n    Object.keys(spanningCSS).forEach(k => {\r\n      if (typeof spanning[k] !== typeof(undefined)) {\r\n        spanning[k] += `\r\n          /* origin:  ${sheetOrigin} */\r\n          ${spanningCSS[k]}`;\r\n      }\r\n    });\r\n\r\n    styleFragment.appendChild(\r\n      createElement(\"style\", { \"data-css-origin\": sheetOrigin }, noSpanningCSS)\r\n    );\r\n  });\r\n\r\n  // Spanning media blocks grouped by spanning type (single-fold-horizontal, vertical or none)\r\n  // let spanningCSSText = getSpanningCSSText(cssText);\r\n  // editedCSSText = Object.assign(editedCSSText, spanningCSSText);\r\n\r\n  cssElements.forEach(el => el.parentElement.removeChild(el));\r\n\r\n  document.head.appendChild(styleFragment);\r\n\r\n  // insert spanning media query stylesheet\r\n  insertSpanningStyles();\r\n\r\n  window.addEventListener(\"resize\", debounce(insertSpanningStyles, 150));\r\n});\r\n\r\n// looks at configs and appends the correct `spanning` styles\r\nfunction insertSpanningStyles() {\r\n  Array.from(document.querySelectorAll(`.${POLYFILL_NAMESPACE}`)).forEach(el =>\r\n    el.parentElement.removeChild(el)\r\n  );\r\n  let configs = window[POLYFILL_NAMESPACE];\r\n\r\n  if (configs.spanning === SPANNING_MF_VAL_NONE) return;\r\n\r\n  let spanningCSSText = spanning[configs.spanning];\r\n  let rects = getDeviceFoldRects(configs);\r\n\r\n  Object.keys(rects).forEach(r => {\r\n    spanningCSSText = replaceCSSEnvVariables(\r\n      spanningCSSText,\r\n      r,\r\n      `${rects[r]}px`\r\n    );\r\n  });\r\n\r\n  let polyfilledStyles = document.createElement(\"style\");\r\n  polyfilledStyles.className = POLYFILL_NAMESPACE;\r\n  polyfilledStyles.textContent = spanningCSSText;\r\n  document.head.appendChild(polyfilledStyles);\r\n}\r\n\r\nconst VALID_CONFIG_PROPS = new Set([\r\n  \"foldSize\",\r\n  \"browserShellSize\",\r\n  \"spanning\"\r\n]);\r\n\r\nfunction update(newConfings) {\r\n  Object.keys(newConfings).forEach(k => {\r\n    if (VALID_CONFIG_PROPS.has(k)) {\r\n      window[POLYFILL_NAMESPACE][k] = newConfings[k];\r\n      sessionStorage.setItem(\r\n        `${POLYFILL_NAMESPACE}-${k}`,\r\n        window[POLYFILL_NAMESPACE][k]\r\n      );\r\n    }\r\n  });\r\n\r\n  window[POLYFILL_NAMESPACE].onupdate.forEach(fn => fn());\r\n}\r\n","/**\r\n * Returns a promise, once resolved it contains an array\r\n * of CSS text retrieved from <link> URLs and <style> DOM elements\r\n *\r\n * @param {array} elements JavaScript array (not NodeList)\r\n *\r\n * @return {Promise<string[]>}\r\n */\r\nexport function fetchCSSText(elements) {\r\n  return Promise.all(\r\n    elements.map(element => {\r\n      const href = element.href;\r\n      if (href) {\r\n        return fetch(href).then(r => r.text());\r\n      }\r\n      return element.textContent;\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Returns a function that won't call `fn` if it was invoked at a\r\n * faster interval than `wait`\r\n *\r\n * @param {Function} fn\r\n * @param {Number} wait - milliseconds\r\n */\r\nexport function debounce(fn, wait) {\r\n  let timeout;\r\n  return function() {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => fn.apply(this, arguments), wait);\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} name\r\n * @param {Object} attributes\r\n * @param {String} content\r\n *\r\n * @return {DOM Node}\r\n */\r\nexport function createElement(name, attributes, content) {\r\n  const el = document.createElement(name);\r\n  Object.keys(attributes).forEach(k => {\r\n    el.setAttribute(k, attributes[k])\r\n  })\r\n  if (typeof content !== typeof(undefined)) {\r\n    el.textContent = content;\r\n  }\r\n  return el;\r\n}","import {\r\n  SPANNING_MF_VAL_VER,\r\n  SPANNING_MF_VAL_HOR,\r\n  CSS_ENV_FOLD_TOP,\r\n  CSS_ENV_FOLD_LEFT,\r\n  CSS_ENV_FOLD_HEIGHT,\r\n  CSS_ENV_FOLD_WIDTH\r\n} from \"../constants.js\";\r\n\r\n/**\r\n * Returns the device fold (hinge) geometry\r\n *\r\n * @param {Object} configs\r\n * @returns {Object}\r\n */\r\nexport function getDeviceFoldRects(configs) {\r\n  let left = 0,\r\n    top = 0,\r\n    width = 0,\r\n    height = 0;\r\n  if (configs.spanning === SPANNING_MF_VAL_VER) {\r\n    width = configs.foldSize;\r\n    height = window.innerHeight;\r\n    left = window.innerWidth / 2 - configs.foldSize / 2;\r\n  }\r\n  if (configs.spanning === SPANNING_MF_VAL_HOR) {\r\n    width = window.innerWidth;\r\n    height = configs.foldSize;\r\n    top =\r\n      ((window.innerHeight - configs.browserShellSize) / 2) - (configs.foldSize / 2);\r\n  }\r\n  return {\r\n    [CSS_ENV_FOLD_TOP]: top,\r\n    [CSS_ENV_FOLD_LEFT]: left,\r\n    [CSS_ENV_FOLD_HEIGHT]: height,\r\n    [CSS_ENV_FOLD_WIDTH]: width\r\n  };\r\n}\r\n"],"names":["const","SPANNING_MF_VAL_HOR","SPANNING_MF_VAL_VER","SPANNING_MF_VAL_NONE","CSS_ENV_FOLD_TOP","CSS_ENV_FOLD_LEFT","CSS_ENV_FOLD_HEIGHT","CSS_ENV_FOLD_WIDTH","POLYFILL_NAMESPACE","MEDIA_FEATURES_REGEXP","MEDIA_TYPES_REGEXP","cssEnvVariableRegExpMaker","variable","RegExp","window","spanning","sessionStorage","getItem","foldSize","browserShellSize","Object","defineProperty","value","update","newConfings","keys","forEach","k","VALID_CONFIG_PROPS","has","setItem","onupdate","fn","insertSpanningStyles","addEventListener","evt","data","action","push","elements","cssElements","Array","from","document","querySelectorAll","el","parentElement","removeChild","configs","spanningCSSText","rects","left","top","width","height","innerHeight","innerWidth","getDeviceFoldRects","r","replaceWith","replace","polyfilledStyles","createElement","className","textContent","head","appendChild","Promise","all","map","element","href","fetch","then","text","sheetsTextContentArray","timeout","styleFragment","DocumentFragment","sheet","i","attributes","content","spanningMediaBlocks","result","noSpanningCSS","spanningCSS","cssText","regex","matchAll","length","exec","_processSpanningMediaBlock","block","definition","spanningValue","indexOf","mediaTypes","match","mediaFeatures","filter","f","includes","join","sheetOrigin","setAttribute","clearTimeout","setTimeout","apply","this","arguments","Set"],"mappings":"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"}